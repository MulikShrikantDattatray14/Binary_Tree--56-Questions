
class TreeNode {
    constructor(val) {
        this.val = val;
        this.left = this.right = null;
    }
}

// Serialize the binary tree to an array
// level order traversal
//convert array to a tree.
function serialize(root) {
    if (root == null) return [];
    const q = [root];
    const res = [];
    while (q.length > 0) {
        const node = q.shift();
        if (node == null) {
            res.push(null);
            continue;
        }
        res.push(node.val);
        q.push(node.left);
        q.push(node.right);
    }
    return res;
}

// Deserialize the binary tree from an array
// convert array to a tree.
function deserialize(data) {
    if (data.length === 0) return null;
    const q = [];
    const root = new TreeNode(data[0]);
    q.push(root);
    for (let i = 1; i < data.length; i++) {
        const parent = q.shift();
        if (data[i] !== null) {
            const left = new TreeNode(data[i]);
            parent.left = left;
            q.push(left);
        }
        if (data[i++] !== null) {
            const right = new TreeNode(data[i]);
            parent.right = right;
            q.push(right);
        }
    }
    return root;
}

// Example usage:
const inputArray = [1, 2, 3, null, null, 4, 5];
const root = deserialize(inputArray);
console.log(root);
console.log(serialize(root)); // Output: [1, 2, 3, null, null, 4, 5]