//Given a binary tree A.Check whether it is possible to partition the tree to two trees which have equal sum of values after removing exactly one edge on the original tree.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TreeNode {
    constructor(data) {
        this.data = data;
        this.left = this.right = null;
    }
}

function solve(A) {
    let seen = [];
    let root = A;

    function sum_(node) {
        if (node == null) return 0;
        let leftSum = sum_(node.left);
        let rightSum = sum_(node.right);
        seen.push(leftSum + rightSum + node.data);
        return leftSum + rightSum + node.data;
    }

    sum_(root);

    let total = seen[seen.length - 1];

    for (let i = 0; i < seen.length; i++) {
        if (seen[i] === Math.floor(total / 2)) return 1;
    }
    return 0;
}

// Example usage:
// Constructing a binary tree
let root = new TreeNode(5);
root.left = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(6);
root.right = new TreeNode(7);
root.right.left = new TreeNode(5);
root.right.right = new TreeNode(6);

console.log(solve(root)); // Output: 1
  