
// Approach:

// The algorithm approach can be stated as:

//1. We first take an explicit stack data structure and push the root node to it.(if the root node is not NULL).
// 2.Then we use a while loop to iterate over the stack till the stack remains non-empty.
//3. In every iteration we first pop the stackâ€™s top and print it.
//4. Then we first push the right child of this popped node and then push the left child, if they are not NULL. We do so because stack is a last-in-first-out(LIFO) data structure. We need to access the left child first, so we need to push it at the last.
//5.The execution continues and will stop when the stack becomes empty. In this process, we will get the preorder traversal of the tree.
//DLR
function preorderTraversal(root) {
    let curr = root;
    const preOrder = [];
    if (curr === null) {
        return preOrder;
    }
    const stack = [];
    stack.push(curr);
    while (stack.length !== 0) {
        // remove last element
        const topNode = stack.pop();
        preOrder.push(topNode.val);
        //We do so because stack is a last-in-first-out(LIFO) data structure. We need to access the left child first, so we need to push it at the last.
        if (topNode.right !== null) {
            stack.push(topNode.right);
        }
        if (topNode.left !== null) {
            stack.push(topNode.left);
        }
    }

    return preOrder;
};