// //Problem statement
// Given a pair of tree traversal, return 'true' if a unique binary tree can be constructed otherwise 'false'.
// Note:
// Each traversal is represented with an integer: preorder - 1, inorder - 2, postorder - 3.
// Example:
// For 'a' = 2, ‘b’ = 3.
// Answer is True.
// It is also possible to construct a unique binary tree. In this case, the postorder traversal provides the root of the tree, and the inorder traversal helps determine the left and right subtrees.

/*
    Time Complexity: O(1)

    Space Complexity: O(1)
*/

// Function returning 'true' if a unique binary tree can be constructed otherwise 'false'.
function uniqueBinaryTree(a, b) {
  // If one traversal is inorder and the other is not, then return 'true'.
  if ((a === 2 && b !== 2) || (a !== 2 && b === 2)) {
    return true;
  }
  return false;
}
