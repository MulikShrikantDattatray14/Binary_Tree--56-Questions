
class TreeNode {
    constructor(val) {
        this.val = val;
        this.left = this.right = null;
    }
}

function markParents(root, parentTrack) {
    const queue = [];
    queue.push(root);

    while (queue.length > 0) {
        const current = queue.shift();
        if (current.left !== null) {
            parentTrack.set(current.left, current);
            queue.push(current.left);
        }
        if (current.right !== null) {
            parentTrack.set(current.right, current);
            queue.push(current.right);
        }
    }
}

function burnSequence(root, target) {
    const parentTrack = new Map();
    markParents(root, parentTrack);

    const visited = new Map();
    const queue = [];
    queue.push(target);
    visited.set(target, true);

    let totalTime = 0;

    while (queue.length > 0) {
        const size = queue.length;

        for (let i = 0; i < size; i++) {
            const current = queue.shift();
            console.log(current.val); // Print the burning node

            if (
                current != null &&
                current.left !== null &&
                !visited.has(current.left)
            ) {
                queue.push(current.left);
                visited.set(current.left, true);
            }
            if (
                current != null &&
                current.right !== null &&
                !visited.has(current.right)
            ) {
                queue.push(current.right);
                visited.set(current.right, true);
            }
            const parent = parentTrack.get(current);
            if (parent !== undefined && !visited.has(parent)) {
                queue.push(parent);
                visited.set(parent, true);
            }
        }

        totalTime++; // Increment the time after burning all nodes in the current level
    }

    return totalTime - 1;
}

// Example usage:
const root = new TreeNode(1);
root.left = new TreeNode(2);
root.right = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(5);
root.right.right = new TreeNode(6);
root.left.right.left = new TreeNode(7);
root.left.right.right = new TreeNode(8);
root.right.right.right = new TreeNode(9);
root.right.right.right.right = new TreeNode(10);

const targetNode = root.left.right.right; // Target node is 8
const timeRequired = burnSequence(root, targetNode);
console.log(
    "Minimum time required to burn the entire tree:",
    timeRequired,
    "seconds"
); //7 seconds

// Example usage:
const root1 = new TreeNode(3);
root1.left = new TreeNode(5);
root1.right = new TreeNode(1);
root1.left.left = new TreeNode(6);
root1.left.right = new TreeNode(2);
root1.left.right.left = new TreeNode(7);
root1.left.right.right = new TreeNode(4);
root1.right.left = new TreeNode(0);
root1.right.right = new TreeNode(8);

const targetNode1 = root1.left; // Target node is 5
const timeRequired1 = burnSequence(root1, targetNode1);
console.log(
    "Minimum time required to burn the entire tree:",
    timeRequired1,
    "seconds"
); //3 seconds

// Example usage:
const root2 = new TreeNode(1);
root2.left = new TreeNode(2);
root2.right = new TreeNode(3);
root2.left.left = new TreeNode(4);
root2.left.left.left = new TreeNode(8);
root2.left.right = new TreeNode(5);
root2.left.right.left = new TreeNode(10);
root2.right.right = new TreeNode(7);

const targetNode2 = root2.left.right.left; // Target node is 5
const timeRequired2 = burnSequence(root2, targetNode2);
console.log(
    "Minimum time required to burn the entire tree:",
    timeRequired2,
    "seconds"
); //3 seconds

// Example usage:
const root3 = new TreeNode(1);
root3.left = new TreeNode(2);
root3.right = new TreeNode(3);
root3.right.right = new TreeNode(6);
root3.right.right.right = new TreeNode(9);
root3.right.right.right.right = new TreeNode(12);
root3.left.left = new TreeNode(4);
root3.left.right = new TreeNode(5);
root3.left.right.left = new TreeNode(7);
root3.left.right.left.left = new TreeNode(10);
root3.left.right.left.right = new TreeNode(11);
root3.left.right.left.right.right = new TreeNode(13);
root3.left.right.right = new TreeNode(8);
const targetNode3 = root3.left.right.right; // Target node is 5
const timeRequired3 = burnSequence(root3, targetNode3);
console.log(
    "Minimum time required to burn the entire tree:",
    timeRequired3,
    "seconds"
); //3 seconds
