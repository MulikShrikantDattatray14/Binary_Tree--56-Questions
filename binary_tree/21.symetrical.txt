
// Intuition: We need to understand the property of the mirror. We can ignore the root node as it is lying on the mirror line. In the next level, for a symmetric tree, the node at the root’s left should be equal to the node at the root’s right.

class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function helper(p, q) {
    if (p == null && q == null) return true;
    if (p == null || q == null) return false;
    return p.data == q.data && helper(p.left, q.right) && helper(p.right, q.left);
}

function isSymmetric(root) {
    if (helper(root, root) == true) {
        return 1;
    }
    return 0;
}

const root = new Node(1);
root.left = new Node(2);
root.left.left = new Node(3);
root.left.right = new Node(4);
root.right = new Node(2);
root.right.left = new Node(4);
root.right.right = new Node(89);

const res = isSymmetric(root);

if (res) console.log("The tree is symmetrical");
else console.log("The tree is NOT symmetrical");