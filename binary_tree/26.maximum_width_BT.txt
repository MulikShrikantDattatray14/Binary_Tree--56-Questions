
// Width for a level is defined as the maximum number of nodes between the leftmost and rightmost node of the level(including the end nodes and the null nodes between the end nodes).

class TreeNode {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class Pair {
    constructor(node, num) {
        this.node = node;
        this.num = num;
    }
}
// level order traversal
function widthOfBinaryTree(root) {
    if (root === null) return 0;
    let ans = 0;
    let q = [new Pair(root, 0)];

    while (q.length > 0) {
        let size = q.length;
        //mmin- first element of every new level
        let mmin = q[0].num; // to make the id starting from zero
        let first = 0,
            last = 0;
        /// lets go level wise
        for (let i = 0; i < size; i++) {
            let cur_id = q[0].num - mmin;
            let node = q[0].node;
            q.shift(); //removes the first item of an array.

            if (i === 0) first = cur_id;
            if (i === size - 1) last = cur_id;

            if (node.left !== null) q.push(new Pair(node.left, cur_id * 2 + 1));

            if (node.right !== null) q.push(new Pair(node.right, cur_id * 2 + 2));
        }

        ans = Math.max(ans, last - first + 1);
    }

    return ans;
}

// Example usage
let root = new TreeNode(1);
root.left = new TreeNode(3);
root.left.left = new TreeNode(5);
root.left.left.left = new TreeNode(7);
root.right = new TreeNode(2);
root.right.right = new TreeNode(4);
root.right.right.right = new TreeNode(6);

let maxWidth = widthOfBinaryTree(root);
console.log("The maximum width of the Binary Tree is " + maxWidth);