//124. Binary Tree Maximum Path Sum :

// A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

// The path sum of a path is the sum of the node's values in the path.

// Given the root of a binary tree, return the maximum path sum of any non-empty path.

class Node {
    constructor(val) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}
let maxValue = Number.MIN_SAFE_INTEGER;
function maxPathSum(root) {
    maxPathDown(root);
    return maxValue;
}

function maxPathDown(node) {
    if (node === null) return 0;
    const left = Math.max(0, maxPathDown(node.left)); //only take positive values
    const right = Math.max(0, maxPathDown(node.right)); ////only take positive values
    maxValue = Math.max(maxValue, left + right + node.val);
    return Math.max(left, right) + node.val;
}

const root = new Node(-10);
root.left = new Node(9);
root.right = new Node(20);
root.right.left = new Node(15);
root.right.right = new Node(7);

const answer = maxPathSum(root);
console.log("The Max Path Sum for this tree is " + answer);