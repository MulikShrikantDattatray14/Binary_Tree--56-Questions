//Given the root of a binary tree, return the length of the diameter of the tree.

// The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

// The length of a path between two nodes is represented by the number of edges between them.



class TreeNode {
    constructor(val, left = null, right = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

let diameter = 0;
function diameterOfBinaryTree(root) {

    height(root);
    return diameter;
}

function height(node) {
    if (node === null) {
        return 0;
    }
    const lh = height(node.left);
    const rh = height(node.right);
    diameter = Math.max(diameter, lh + rh);
    return 1 + Math.max(lh, rh);
}

// Creating a sample binary tree
const root = new TreeNode(1);
root.left = new TreeNode(2);
root.right = new TreeNode(3);
root.left.left = new TreeNode(4);
root.left.right = new TreeNode(5);
root.right.left = new TreeNode(6);
root.right.right = new TreeNode(7);

// Calling the levelOrderTraversal function
const traversalResult = diameterOfBinaryTree(root);

// Displaying the result
console.log(traversalResult);