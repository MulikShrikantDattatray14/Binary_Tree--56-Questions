class TreeNode {
    constructor(val) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}
function buildTree(preorder, inorder) {
    // map the inorder
    const inMap = new Map();

    for (let i = 0; i < inorder.length; i++) {
        inMap.set(inorder[i], i);
    }
    const root = buildTreeHelper(
        preorder,
        0,
        preorder.length - 1,
        inorder,
        0,
        inorder.length - 1,
        inMap
    );
    return root;
}

function buildTreeHelper(
    preorder,
    preStart,
    preEnd,
    inorder,
    inStart,
    inEnd,
    inMap
) {
    if (preStart > preEnd || inStart > inEnd) return null;

    const root = new TreeNode(preorder[preStart]);
    const inRoot = inMap.get(root.val);
    const numsLeft = inRoot - inStart;

    root.left = buildTreeHelper(
        preorder,
        preStart + 1,
        preStart + numsLeft,
        inorder,
        inStart,
        inRoot - 1,
        inMap
    );
    root.right = buildTreeHelper(
        preorder,
        preStart + numsLeft + 1,
        preEnd,
        inorder,
        inRoot + 1,
        inEnd,
        inMap
    );

    return root;
}

function printTree(root) {
    if (root === null) return;
    printTree(root.left);
    console.log(root.val);
    printTree(root.right);
}
// follow zero based indexing
const preorder = [10, 20, 40, 50, 30, 60];//DLR
const inorder = [40, 20, 50, 10, 60, 30];//LDR
const root = buildTree(preorder, inorder);

printTree(root);